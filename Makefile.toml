# ================================================
# Cactuar
# ================================================
#
# Install cargo-make to run these tasks:
#   cargo install cargo-make --force
# 
# After installation, to run a task:
#   cargo make <task>

[config]
default_to_workspace = false
skip_core_tasks = true

[env]
CACTUAR_DOCKER_TARGET = "cactuar"
CACTUAR_HELM_CHART_NAME = "cactuar"
CACTUAR_HELM_CHART_PATH = "./helm/cactuar"

[tasks.test]
command = "cargo"
args = [ "nextest", "run" ]
install_crate = "cargo-nextest"

[tasks.coverage]
command = "cargo"
args = [ "llvm-cov" ]
install_crate = "cargo-llvm-cov"

[tasks.docs]
command = "cargo"
args = ["doc"]

[tasks.lint]
command = "cargo"
args = ["clippy"]

# Assumes you have Docker installed and running, see:
# https://www.docker.com/get-started/
[tasks.docker]
command = "docker"
args = [
    "build",
    "--tag", # tag and target are currently the same
    "${CACTUAR_DOCKER_TARGET}:${CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX}",
    "--target",
    "${CACTUAR_DOCKER_TARGET}",
    ".", # build context
]

# Assumes you have Helm installed, see: https://helm.sh/docs/intro/install/
#
# This command just prints the Helm template output to stdout. If you want to
# put the contents in a file to examine or search through it, redirect the
# output to a file.
[tasks.helm-preview]
command = "helm"
args = [
     "template",
     "${CACTUAR_HELM_CHART_NAME}",
     "${CACTUAR_HELM_CHART_PATH}",
]

# We need to deploy the Custom Resource Definition as part of the Helm chart,
# this script task will generate the specification for the CRD and overwrite the
# current specification located within the Helm chart template directory.
#
# Updating the specification in Kubernetes can then be done by deploying the
# Helm chart.
[tasks.helm-crd]
script = '''
cargo run --bin crdgen > ${CACTUAR_HELM_CHART_PATH}/templates/crdspec.yaml
'''
